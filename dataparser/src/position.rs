const MIRROR: [i16; 768] = [
    440, 441, 442, 443, 444, 445, 446, 447, 432, 433, 434, 435, 436, 437, 438, 439, 424, 425, 426, 427, 428, 429, 430, 431, 416, 417, 418, 419, 420, 421, 422, 423, 408, 409, 410, 411, 412, 413, 414, 415, 400, 401, 402, 403, 404, 405, 406, 407, 392, 393, 394, 395, 396, 397, 398, 399, 384, 385, 386, 387, 388, 389, 390, 391,
    504, 505, 506, 507, 508, 509, 510, 511, 496, 497, 498, 499, 500, 501, 502, 503, 488, 489, 490, 491, 492, 493, 494, 495, 480, 481, 482, 483, 484, 485, 486, 487, 472, 473, 474, 475, 476, 477, 478, 479, 464, 465, 466, 467, 468, 469, 470, 471, 456, 457, 458, 459, 460, 461, 462, 463, 448, 449, 450, 451, 452, 453, 454, 455,
    568, 569, 570, 571, 572, 573, 574, 575, 560, 561, 562, 563, 564, 565, 566, 567, 552, 553, 554, 555, 556, 557, 558, 559, 544, 545, 546, 547, 548, 549, 550, 551, 536, 537, 538, 539, 540, 541, 542, 543, 528, 529, 530, 531, 532, 533, 534, 535, 520, 521, 522, 523, 524, 525, 526, 527, 512, 513, 514, 515, 516, 517, 518, 519,
    632, 633, 634, 635, 636, 637, 638, 639, 624, 625, 626, 627, 628, 629, 630, 631, 616, 617, 618, 619, 620, 621, 622, 623, 608, 609, 610, 611, 612, 613, 614, 615, 600, 601, 602, 603, 604, 605, 606, 607, 592, 593, 594, 595, 596, 597, 598, 599, 584, 585, 586, 587, 588, 589, 590, 591, 576, 577, 578, 579, 580, 581, 582, 583,
    696, 697, 698, 699, 700, 701, 702, 703, 688, 689, 690, 691, 692, 693, 694, 695, 680, 681, 682, 683, 684, 685, 686, 687, 672, 673, 674, 675, 676, 677, 678, 679, 664, 665, 666, 667, 668, 669, 670, 671, 656, 657, 658, 659, 660, 661, 662, 663, 648, 649, 650, 651, 652, 653, 654, 655, 640, 641, 642, 643, 644, 645, 646, 647,
    760, 761, 762, 763, 764, 765, 766, 767, 752, 753, 754, 755, 756, 757, 758, 759, 744, 745, 746, 747, 748, 749, 750, 751, 736, 737, 738, 739, 740, 741, 742, 743, 728, 729, 730, 731, 732, 733, 734, 735, 720, 721, 722, 723, 724, 725, 726, 727, 712, 713, 714, 715, 716, 717, 718, 719, 704, 705, 706, 707, 708, 709, 710, 711,
    56, 57, 58, 59, 60, 61, 62, 63, 48, 49, 50, 51, 52, 53, 54, 55, 40, 41, 42, 43, 44, 45, 46, 47, 32, 33, 34, 35, 36, 37, 38, 39, 24, 25, 26, 27, 28, 29, 30, 31, 16, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7,
    120, 121, 122, 123, 124, 125, 126, 127, 112, 113, 114, 115, 116, 117, 118, 119, 104, 105, 106, 107, 108, 109, 110, 111, 96, 97, 98, 99, 100, 101, 102, 103, 88, 89, 90, 91, 92, 93, 94, 95, 80, 81, 82, 83, 84, 85, 86, 87, 72, 73, 74, 75, 76, 77, 78, 79, 64, 65, 66, 67, 68, 69, 70, 71,
    184, 185, 186, 187, 188, 189, 190, 191, 176, 177, 178, 179, 180, 181, 182, 183, 168, 169, 170, 171, 172, 173, 174, 175, 160, 161, 162, 163, 164, 165, 166, 167, 152, 153, 154, 155, 156, 157, 158, 159, 144, 145, 146, 147, 148, 149, 150, 151, 136, 137, 138, 139, 140, 141, 142, 143, 128, 129, 130, 131, 132, 133, 134, 135,
    248, 249, 250, 251, 252, 253, 254, 255, 240, 241, 242, 243, 244, 245, 246, 247, 232, 233, 234, 235, 236, 237, 238, 239, 224, 225, 226, 227, 228, 229, 230, 231, 216, 217, 218, 219, 220, 221, 222, 223, 208, 209, 210, 211, 212, 213, 214, 215, 200, 201, 202, 203, 204, 205, 206, 207, 192, 193, 194, 195, 196, 197, 198, 199,
    312, 313, 314, 315, 316, 317, 318, 319, 304, 305, 306, 307, 308, 309, 310, 311, 296, 297, 298, 299, 300, 301, 302, 303, 288, 289, 290, 291, 292, 293, 294, 295, 280, 281, 282, 283, 284, 285, 286, 287, 272, 273, 274, 275, 276, 277, 278, 279, 264, 265, 266, 267, 268, 269, 270, 271, 256, 257, 258, 259, 260, 261, 262, 263,
    376, 377, 378, 379, 380, 381, 382, 383, 368, 369, 370, 371, 372, 373, 374, 375, 360, 361, 362, 363, 364, 365, 366, 367, 352, 353, 354, 355, 356, 357, 358, 359, 344, 345, 346, 347, 348, 349, 350, 351, 336, 337, 338, 339, 340, 341, 342, 343, 328, 329, 330, 331, 332, 333, 334, 335, 320, 321, 322, 323, 324, 325, 326, 327,
];

// BulletFormat
#[repr(C)]
#[derive(Debug, Clone, Copy, PartialEq, Default)]
pub struct Position {
    occupancy: u64,
    pieces: [u8; 16],
    score: i16,
    result: u8,
    stm_king: u8,
    nstm_king: u8,
}

impl Position {
    pub fn get_score(&self) -> f32 {
        self.score as f32
    }

    pub fn get_result(&self) -> f32 {
        self.result as f32 / 2.0
    }
}

impl IntoIterator for Position {
    type Item = (i16, i16);
    type IntoIter = PositionIterator;

    fn into_iter(self) -> PositionIterator {
        PositionIterator { board: self, index: 0 }
    }
}

pub struct PositionIterator {
    board: Position,
    index: usize,
}

impl Iterator for PositionIterator {
    type Item = (i16, i16);
    fn next(&mut self) -> Option<Self::Item> {
        if self.board.occupancy == 0 {
            return None;
        }

        let square = self.board.occupancy.trailing_zeros() as usize;
        let piece = (self.board.pieces[self.index / 2] as usize * [64, 4][self.index % 2]) & 0b1111000000;

        self.board.occupancy &= self.board.occupancy - 1;
        self.index += 1;

        let stm_feature = piece + square;

        Some((stm_feature as i16, MIRROR[stm_feature]))
    }
}
